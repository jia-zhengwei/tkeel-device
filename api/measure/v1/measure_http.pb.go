// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http 0.1.0

package v1

import (
	context "context"
	json "encoding/json"
	go_restful "github.com/emicklei/go-restful"
	http "net/http"
)

import transportHTTP "github.com/tkeel-io/kit/transport/http"

// This is a compile-time assertion to ensure that this generated file
// is compatible with the tkeel package it is being compiled against.
// import package.context.http.go_restful.json.

type MeasureHTTPServer interface {
	CreateMeasure(context.Context, *CreateMeasureRequest) (*CommonResponse, error)
	DeleteMeasure(context.Context, *DeleteMeasureRequest) (*CommonResponse, error)
	GetMeasure(context.Context, *GetMeasureRequest) (*CommonResponse, error)
	ListMeasure(context.Context, *ListMeasureRequest) (*CommonResponse, error)
	UpdateMeasure(context.Context, *UpdateMeasureRequest) (*CommonResponse, error)
}

type MeasureHTTPHandler struct {
	srv MeasureHTTPServer
}

func newMeasureHTTPHandler(s MeasureHTTPServer) *MeasureHTTPHandler {
	return &MeasureHTTPHandler{srv: s}
}

func (h *MeasureHTTPHandler) CreateMeasure(req *go_restful.Request, resp *go_restful.Response) {
	in := &CreateMeasureRequest{}
	if err := transportHTTP.GetBody(req, in); err != nil {
		resp.WriteErrorString(http.StatusBadRequest, err.Error())
		return
	}

	out, err := h.srv.CreateMeasure(req.Request.Context(), in)
	if err != nil {
		resp.WriteErrorString(http.StatusInternalServerError, err.Error())
		return
	}

	result, err := json.Marshal(out)
	if err != nil {
		resp.WriteErrorString(http.StatusInternalServerError, err.Error())
		return
	}
	_, err = resp.Write(result)
	if err != nil {
		resp.WriteErrorString(http.StatusInternalServerError, err.Error())
		return
	}
}

func (h *MeasureHTTPHandler) DeleteMeasure(req *go_restful.Request, resp *go_restful.Response) {
	in := &DeleteMeasureRequest{}
	if err := transportHTTP.GetQuery(req, in); err != nil {
		resp.WriteErrorString(http.StatusBadRequest, err.Error())
		return
	}
	if err := transportHTTP.GetPathValue(req, in); err != nil {
		resp.WriteErrorString(http.StatusBadRequest, err.Error())
		return
	}

	out, err := h.srv.DeleteMeasure(req.Request.Context(), in)
	if err != nil {
		resp.WriteErrorString(http.StatusInternalServerError, err.Error())
		return
	}

	result, err := json.Marshal(out)
	if err != nil {
		resp.WriteErrorString(http.StatusInternalServerError, err.Error())
		return
	}
	_, err = resp.Write(result)
	if err != nil {
		resp.WriteErrorString(http.StatusInternalServerError, err.Error())
		return
	}
}

func (h *MeasureHTTPHandler) GetMeasure(req *go_restful.Request, resp *go_restful.Response) {
	in := &GetMeasureRequest{}
	if err := transportHTTP.GetQuery(req, in); err != nil {
		resp.WriteErrorString(http.StatusBadRequest, err.Error())
		return
	}
	if err := transportHTTP.GetPathValue(req, in); err != nil {
		resp.WriteErrorString(http.StatusBadRequest, err.Error())
		return
	}

	out, err := h.srv.GetMeasure(req.Request.Context(), in)
	if err != nil {
		resp.WriteErrorString(http.StatusInternalServerError, err.Error())
		return
	}

	result, err := json.Marshal(out)
	if err != nil {
		resp.WriteErrorString(http.StatusInternalServerError, err.Error())
		return
	}
	_, err = resp.Write(result)
	if err != nil {
		resp.WriteErrorString(http.StatusInternalServerError, err.Error())
		return
	}
}

func (h *MeasureHTTPHandler) ListMeasure(req *go_restful.Request, resp *go_restful.Response) {
	in := &ListMeasureRequest{}
	if err := transportHTTP.GetQuery(req, in); err != nil {
		resp.WriteErrorString(http.StatusBadRequest, err.Error())
		return
	}

	out, err := h.srv.ListMeasure(req.Request.Context(), in)
	if err != nil {
		resp.WriteErrorString(http.StatusInternalServerError, err.Error())
		return
	}

	result, err := json.Marshal(out)
	if err != nil {
		resp.WriteErrorString(http.StatusInternalServerError, err.Error())
		return
	}
	_, err = resp.Write(result)
	if err != nil {
		resp.WriteErrorString(http.StatusInternalServerError, err.Error())
		return
	}
}

func (h *MeasureHTTPHandler) UpdateMeasure(req *go_restful.Request, resp *go_restful.Response) {
	in := &UpdateMeasureRequest{}
	if err := transportHTTP.GetBody(req, in); err != nil {
		resp.WriteErrorString(http.StatusBadRequest, err.Error())
		return
	}
	if err := transportHTTP.GetPathValue(req, in); err != nil {
		resp.WriteErrorString(http.StatusBadRequest, err.Error())
		return
	}

	out, err := h.srv.UpdateMeasure(req.Request.Context(), in)
	if err != nil {
		resp.WriteErrorString(http.StatusInternalServerError, err.Error())
		return
	}

	result, err := json.Marshal(out)
	if err != nil {
		resp.WriteErrorString(http.StatusInternalServerError, err.Error())
		return
	}
	_, err = resp.Write(result)
	if err != nil {
		resp.WriteErrorString(http.StatusInternalServerError, err.Error())
		return
	}
}

func RegisterMeasureHTTPServer(container *go_restful.Container, srv MeasureHTTPServer) {
	var ws *go_restful.WebService
	for _, v := range container.RegisteredWebServices() {
		if v.RootPath() == "/v1" {
			ws = v
			break
		}
	}
	if ws == nil {
		ws = new(go_restful.WebService)
		ws.ApiVersion("/v1")
		ws.Path("/v1").Produces(go_restful.MIME_JSON)
		container.Add(ws)
	}

	handler := newMeasureHTTPHandler(srv)
	ws.Route(ws.POST("/measure").
		To(handler.CreateMeasure))
	ws.Route(ws.PUT("/measure/{id}").
		To(handler.UpdateMeasure))
	ws.Route(ws.DELETE("/measure/{id}").
		To(handler.DeleteMeasure))
	ws.Route(ws.GET("/measure/{id}").
		To(handler.GetMeasure))
	ws.Route(ws.GET("/measure").
		To(handler.ListMeasure))
}
